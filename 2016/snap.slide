Understanding Snap on classic desktop about 20 minutes
Ubuntu Offline meeting 16.06

Kentaro KAZUHAMA
kazken3@gmail.com
@kazken3

* What is snappy?
- OSとアプリケーションを分割
- トランザクショナルなイメージベースのシステム
- ファイルはリードオンリーベース
- 署名やフィンガープリントによる開発者の保証
- 差分管理


* Snappy,Snappy Ubuntu Core,Snap??

* Snappy,Snappy Ubuntu Core,Snap??
- Snappy:パッケージシステム
    
- Snappy Ubuntu Core:Snappyを搭載したUbuntu Core

- Snap:Snappyで管理可能なアプリケーションフォーマット

* Various snap packages
- App snap : アプリケーション 

- Kernel snap : 特定のカーネルをエミュレーション(e.g. canonical-pc-linux)

- Gadget snap : 特定ハード向け(e.g. Raspberry Pi 2, BeagleBone Black)

- OS snap : ベースシステム。つまり *"ubuntu-core* *snap"*

.image ./snap/layer.png 

* How works Snap App on classic desktop?
- /snap/$name/$version/にインストール
- 実行時はubuntu-core-launcherがUbuntu Coreを叩く。snap向けの環境変数を適用
- スレイブマウントネームスペースやプライベート/tmpディレクトリを作成
- ubuntu-core-launcherがUbuntu Coreから/bin, /lib, /lib64, /sbin, /usrをマウントし、AppArmorやSeccompの制限を適用
- アプリケーションが起動。AppArmorの制限を緩和することでホストの/dev, /proc/, /sys, /mediaを見れる

.image ./snap/snap_works.png _ _


* Install snap apps on classic desktop
- Technology preview on 16.04
動くが制限事項あり(e.g.ロールバックできない、ubuntu-coreがremoveできない)
ロールバックっぽいことはできますが...

- "snap" command
snappy on desktopはsnappyコマンドでなく *snap* コマンド

- snapコマンドはsnapdを操作するためのコマンド(16.04から"snapd"パッケージとしてmainに追加)	
- snapdはREST API経由でUbuntu Coreと接続
See [[https://developer.ubuntu.com/en/snappy/guides/rest/]].

* snap command

  使いそうなコマンド:
  abort       ペンディング中の変更を中止
  change      指定したsnapの変更タスクを表示
  changes     システム全体の変更タスクを表示
  find        検索
  help        ヘルプ
  install     インストール
  interfaces  インタフェース一覧
  list        インストール済みsnap一覧
  refresh     snapをアップデート
  remove      snapを削除


* Demo - Access to Ubuntu Core by REST API

* How to make snap package?
- *sudo* *apt* *install* *snapcraft* を実行
- コードを書く
- *snapcraft* *init* を実行
- 作成された *snapcraft.yml* を記載
- *snapcraft* を実行
- 完成！

* Snapcraft
- Pull  : snapパッケージに必要なものを./partsにダウンロード(git clone,binary download...)
- Build : ./parts内で必要なものはビルド
- Stage : ./parts内をビルドしたものは、./stageディレクトリにまとめられる
- Strip : ./snapディレクトリにsnapフォーマットに沿ってまとめられる
- Snap  : squashfsフォーマットでパッケージされる

* snapcraft.yaml

    name: golang-hello
    version: 1.0.7
    summary: Hello World written by golang
    description: Hello World written by golang for stadying snap package format
    confinement: strict
    
    apps:
        hello:
            command: bin/golang-hello
    
    parts:
        local:
            plugin: go
            source: .
    


* Demo - Snapcraft building

* Inside snap
- squashfs
- unsquashfs *.snap

    .
    ├── bin
    │   ├── build
    │   └── golang-hello
    ├── command-hello.wrapper
    └── meta
        └── snap.yaml

* Conclusion
- Separate
- Build Easy
- More develop

* Any questions?
