Understanding Snap on classic desktop about 20 minutes
Ubuntu Offline meeting 16.06

Kentaro KAZUHAMA
kazken3@gmail.com
@kazken3


* Do you know Snap package ?

* Snap package
- ユニバーサルLinuxパッケージ(Arch, Debian, Fedora, Gentoo, Ubuntu)
- OSとアプリケーションを分離しているので、安全に実行可能
- 自動でトランザクショナルな更新でいつでも新しく、壊れにくい。
- 簡単に作成可能


* Various snap packages
- App snap : アプリケーション 

- Kernel snap : 特定のカーネルをエミュレーション(e.g. canonical-pc-linux)

- Gadget snap : 特定ハード向け(e.g. Raspberry Pi 2, BeagleBone Black)

- OS snap : ベースシステム。つまり *"ubuntu-core* *snap"*

.image ./snap/layer.png 

* Install snap apps on classic desktop
- Technology preview on 16.04
動くが制限事項あり(e.g.ubuntu-coreがremoveできない..)

- use "snap" command
snappy on desktopはsnappyコマンドでなく *snap* コマンド

- /snap/$name/$version/にインストール

* How works ?
* How works Snap App (on classic desktop)?
- /snap/bin/配下の実行ファイルを起動する（wrapper file）
- snap向けの環境変数を適用。ホスト側のubuntu-core-launcherがUbuntu Coreを起動
- slaveマウント名前空間やプライベート/tmpディレクトリを作成
- ubuntu-core-launcherがUbuntu Coreから、snapパッケージに含まれている/bin, /lib, /lib64, /sbin, /usrなどをマウント。AppArmorやSeccompの制限を適用
- アプリケーション起動。AppArmorの制限を緩和することでホスト側へのアクセスが可能に
.image ./snap/snap_works.png _ _


* snap command

- 使いそうなコマンド
  abort       ペンディング中の変更を中止
  change      指定したsnapの変更タスクを表示
  changes     システム全体の変更タスクを表示
  find        検索
  help        ヘルプ
  install     インストール
  interfaces  インタフェース一覧
  list        インストール済みsnap一覧
  refresh     snapをアップデート
  remove      snapを削除


- snapコマンドはsnapdを操作するためのコマンド(16.04から"snapd"パッケージとしてmainに追加)	

- snapdはREST API経由でUbuntu Coreと接続
See [[https://developer.ubuntu.com/en/snappy/guides/rest/]].


* Demo - Access to Ubuntu Core by REST API

* How to make snap package?
- コードを書く
- *sudo* *apt* *install* *snapcraft* を実行
- *snapcraft* *init* を実行
- 作成された *snapcraft.yml* に記載
- *snapcraft* を実行
- 完成！

* snapcraft.yaml

    name: golang-hello
    version: 1.0.7
    summary: Hello World written by golang
    description: Hello World written by golang for stadying snap package format
    confinement: strict
    
    apps:
        hello:
            command: bin/golang-hello
    
    parts:
        local:
            plugin: go
            source: .
    


* Snapcraft works...
- Pull  : snapパッケージに必要なものを./partsにダウンロード(git clone,binary download...)
- Build : ./parts内で必要なものはビルドする
- Stage : ./parts内をビルドしたものを、./stageディレクトリにまとめる
- Prime : ./primeディレクトリにsnapフォーマットに沿ってまとめる
- Snap  : squashfsで.snapにパッケージする


* Demo - Snapcraft building


* Inside snap
- squashfs
- unsquashfs *.snap

    .
    ├── bin
    │   ├── build
    │   └── golang-hello
    ├── command-hello.wrapper
    └── meta
        └── snap.yaml

* Snapcraft reference
- [[http://snapcraft.io]]
- snapcraft comand
  $snapcraft tour
- [[https://github.com/ubuntu/snappy-playpen][snappy-playpen]]
- [[https://lists.ubuntu.com/archives/snapcraft/][Snapcraft mailing list]]

* FAQ
- deb packagesはどうなるの
⇒今のところは何も変わらない。共存可能

- snapパッケージが重い、めっちゃ重い
⇒システムと分離するため、アプリケーション側にいろいろ(実行環境やライブラリ)持ってるから重い。トレードオフ

- X11を利用するのsnapパッケージにはセキュリティ上の問題が...
⇒アプリケーション自体にセキュリティリスクがある場合、snapではどうしようもない場合がある
でもそれも次第に解決すると思う。(Mir, Wayland)
See : [[http://blog.labix.org/2016/04/22/snappy-interfaces]]


* Any questions?

